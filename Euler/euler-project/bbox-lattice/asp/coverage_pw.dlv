%%% Max Number of Euler Regions
#maxint=5.

%%% Euler Regions
r(M):- #int(M),M>=1,M<=#maxint.

%%% Concepts
tax(t1,0).
concept2(A, B) :- concept(A,B,_).
concept2(c1_A,0).
concept(c1_C,0,0).
concept(c1_B,0,1).
tax(t2,1).
concept2(A, B) :- concept(A,B,_).
concept(c2_D,1,0).

%%% Euler Bit
bit(M, 0, V):-r(M),M1=M/1, #mod(M1,3,V).
bit(M, 1, V):-r(M),M1=M/3, #mod(M1,2,V).


%%% Meaning of regions
in(X, M) :- r(M),concept(X,T,N),N1=N+1,bit(M,T,N1).
out(X, M) :- r(M),concept(X,T,N),N1=N+1,not bit(M,T,N1).
in(X, M) :- r(M),concept2(X,_),not out(X, M).
out(X, M) :- out3(X, M, _), ix.
irs(M) :- in(X, M), out(X, M), r(M), concept2(X,_).

%%% Constraints of regions.
irs(X) :- ir(X, _).
vrs(X) :- vr(X, _).
vr(X, X) :- not irs(X), r(X).
ir(X, X) :- not vrs(X), r(X).
ie(prod(A,B)) :- vr(X, A), ir(X, B), ix.
:- vrs(X), irs(X), pw.

%%% Inconsistency Explanation.
ie(s(R, A, Y)) :- pie(R, A, Y), not cc(R, Y), ix.
cc(R, Y) :- c(R, _, Y), ix.

%%% Parent-Child relations
%% ISA
% c1_B isa c1_A
ir(X, r56) :- in(c1_B, X), out(c1_A, X), pw.
ir(X, prod(r56,R)) :- in(c1_B,X), out3(c1_A, X, R), ix.
:- #count{X: vrs(X), in(c1_B, X), in(c1_A, X)} = 0, pw.
pie(r56, A, 1) :- ir(X, A), in(c1_B, X), in(c1_A, X), ix.
c(r56, A, 1) :- vr(X, A), in(c1_B, X), in(c1_A, X), ix.

% c1_C isa c1_A
ir(X, r57) :- in(c1_C, X), out(c1_A, X), pw.
ir(X, prod(r57,R)) :- in(c1_C,X), out3(c1_A, X, R), ix.
:- #count{X: vrs(X), in(c1_C, X), in(c1_A, X)} = 0, pw.
pie(r57, A, 1) :- ir(X, A), in(c1_C, X), in(c1_A, X), ix.
c(r57, A, 1) :- vr(X, A), in(c1_C, X), in(c1_A, X), ix.

%% coverage
out3(c1_A, X, r58) :- out(c1_B, X), out(c1_C, X), ix.
out(c1_A, X) :- out(c1_B, X), out(c1_C, X), pw.
%% sibling disjointness
% c1_B ! c1_C
ir(X, r59) :- in(c1_B, X), in(c1_C, X).
:- #count{X: vrs(X), in(c1_B, X), out(c1_C, X)} = 0, pw.
:- #count{X: vrs(X), out(c1_B, X), in(c1_C, X)} = 0, pw.
pie(r59, A, 1) :- ir(X, A), in(c1_B, X), out(c1_C, X), ix.
c(r59, A, 1) :- vr(X, A), in(c1_B, X), out(c1_C, X), ix.
pie(r59, A, 2) :- ir(X, A), out(c1_B, X), in(c1_C, X), ix.
c(r59, A, 2) :- vr(X, A), out(c1_B, X), in(c1_C, X), ix.


%%% Articulations
% 1.B disjoint 2.D
:- #count{X: vrs(X), in(c1_B,X), out(c2_D,X)} = 0, pw.
:- #count{X: vrs(X), out(c1_B,X), in(c2_D,X)} = 0, pw.
pie(r60, A, 1) :- ir(X, A), out(c1_B, X), in(c2_D, X), ix.
c(r60, A, 1) :- vr(X, A), out(c1_B, X), in(c2_D, X), ix.

pie(r60, A, 2) :- ir(X, A), in(c1_B, X), out(c2_D, X), ix.
c(r60, A, 2) :- vr(X, A), in(c1_B, X), out(c2_D, X), ix.

ir(X, r60) :- in(c1_B,X), in(c2_D,X).

% 1.C disjoint 2.D
:- #count{X: vrs(X), in(c1_C,X), out(c2_D,X)} = 0, pw.
:- #count{X: vrs(X), out(c1_C,X), in(c2_D,X)} = 0, pw.
pie(r61, A, 1) :- ir(X, A), out(c1_C, X), in(c2_D, X), ix.
c(r61, A, 1) :- vr(X, A), out(c1_C, X), in(c2_D, X), ix.

pie(r61, A, 2) :- ir(X, A), in(c1_C, X), out(c2_D, X), ix.
c(r61, A, 2) :- vr(X, A), in(c1_C, X), out(c2_D, X), ix.

ir(X, r61) :- in(c1_C,X), in(c2_D,X).

%%% Decoding now
:- rel(X, Y, "="), rel(X, Y, "<"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, ">"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, ">"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, ">"), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, ">"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "><"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- not rel(X, Y, "="), not rel(X, Y, "<"), not rel(X, Y, ">"), not rel(X, Y, "><"), not rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), N1 < N2, not ncf(X), not ncf(Y), pw.

rel(X, Y, "=") :- not hint(X, Y, 0), hint(X, Y, 1), not hint(X, Y, 2), pw.
rel(X, Y, "<") :- not hint(X, Y, 0), hint(X, Y, 1), hint(X, Y, 2), pw.
rel(X, Y, ">") :- hint(X, Y, 0), hint(X, Y, 1), not hint(X, Y, 2), pw.
rel(X, Y, "><") :- hint(X, Y, 0), hint(X, Y, 1), hint(X, Y, 2), pw.
rel(X, Y, "!") :- hint(X, Y, 0), not hint(X, Y, 1), hint(X, Y, 2), pw.


hint(X, Y, 0) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), in(X, R), out(Y, R), not ncf(X), not ncf(Y), pw.
hint(X, Y, 1) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), in(X, R), in(Y, R), not ncf(X), not ncf(Y), pw.
hint(X, Y, 2) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), out(X, R), in(Y, R), not ncf(X), not ncf(Y), pw.

